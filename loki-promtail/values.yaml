global:
  image:
    registry: docker.io
    repository: grafana/loki
    tag: 2.9.1
    pullPolicy: IfNotPresent

# Service Account Configuration (fixes your error)
serviceAccount:
  create: true
  name: loki-serviceaccount
  annotations: {}
  automountServiceAccountToken: true

loki:
  auth_enabled: false
  commonConfig:
    replication_factor: 3
    ring:
      kvstore:
        store: memberlist

  storage:
    type: filesystem
    bucketNames:
      chunks: chunks
      ruler: ruler
      admin: admin
    filesystem:
      chunks_directory: /loki/chunks
      rules_directory: /loki/rules

  schemaConfig:
    configs:
      - from: 2020-10-24
        store: boltdb-shipper
        object_store: filesystem
        schema: v11
        index:
          prefix: index_
          period: 24h

  storage_config:
    boltdb_shipper:
      active_index_directory: /loki/boltdb-shipper-active
      cache_location: /loki/boltdb-shipper-cache
      shared_store: filesystem

  limits_config:
    retention_period: 720h # 30 days retention
    enforce_metric_name: false
    reject_old_samples: true
    reject_old_samples_max_age: 168h
    ingestion_rate_mb: 16
    ingestion_burst_size_mb: 32
    max_entries_limit_per_query: 5000
    max_query_series: 1000

  ingester:
    lifecycler:
      ring:
        replication_factor: 3
        kvstore:
          store: memberlist
    chunk_idle_period: 1h
    max_transfer_retries: 0
    chunk_target_size: 1572864 # 1.5MB

  compactor:
    working_directory: /loki/compactor
    shared_store: filesystem
    compaction_interval: 10m
    retention_enabled: true

  memberlist:
    join_members: []
    bind_port: 7946

  query_scheduler:
    max_outstanding_requests_per_tenant: 2048

# Persistence - consider using PVC instead of hostPath for production
persistence:
  enabled: true
  accessModes:
    - ReadWriteOnce
  size: 50Gi
  storageClassName: "standard"
  annotations: {}
  # Only use hostPath for development
  hostPath:
    enabled: false
    path: /data/loki
    nodeName: worker-node1

service:
  type: ClusterIP
  port: 3100
  targetPort: http-metrics
  annotations: {}

# Enable monitoring if you have Prometheus Operator
serviceMonitor:
  enabled: false
  interval: 10s
  scrapeTimeout: 10s
  labels: {}

resources:
  limits:
    cpu: 2
    memory: 4Gi
  requests:
    cpu: 1
    memory: 2Gi

# Security Context
securityContext:
  fsGroup: 10001
  runAsGroup: 10001
  runAsNonRoot: true
  runAsUser: 10001

podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "http-metrics"

# Pod Disruption Budget for high availability
pdb:
  enabled: true
  minAvailable: 1

nodeSelector: {}
tolerations: []
affinity: {}
